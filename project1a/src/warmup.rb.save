def fib(n)
    arr = Array.new()
    if n==1
	arr << 0
    elsif n==2
	arr << 0
	arr << 1
    end

    if n > 2
	#loop index b/c i can't be bothered to figure out recursion
	i = 2
	while i <=3
	  num1 = arr[i-1]
	  num2 = arr[i-2]
	  nFibNum = num1 + num2
	  arr << nFibNum
	  i=i+1
	end
    end

    return arr
end

def isPalindrome(n)
    #convert n to a string
    str = n.to_s
    puts n
    #reverse the string
    rev = ""
    #append each char of n to rev
    i = str.length
    while i>0
	rev = rev + str[i-1]
    	i--
    end
    return str.eql?(rev)
  
end

def nthmax(n, a)
    if n >= a.length
	return nil
    end

    nMax=0

    #sort array
    sorted = a.sort

    #return number at position n-1
    return sorted[n-1]
end

def freq(s)
    if s.length < 1
	return s
    end

    #create array to store each char in s
    chars = Array.new()
    #create array to store frequencies of each character
    freqs = Array.new(s.length)

    #iterate through string s
    for i in 0..(s.length-1) do
    	#if array chars already contains the given character in s, increment the
	#corresponding frequency by one
	
	#store the index of the given character in chars
	charIndex = hasChar(s,s[i])
	if charIndex >=0
	    freqs[charIndex] = freqs[charIndex]+1
	else #otherwise append the character to end of chars and increment the frequency by 1
	    chars << s[i]
	    freqs[chars.length-1] = 1
	end
    end

    #next, find the highest frequency
    max = 
    max_index = 0
    #iterate through frequencies
    for c in 1..freqs.length-1 do
	if freqs[c] > max
	    max = freqs[c]
	    max_index = c
	end
    end
    return chars[max_index]
end

def hasChar(s, c)
    for i in 0..(s.length-1) do
	if s[i] == c
	    return i
	end
    end
return -1

end

def zipHash(arr1, arr2)
    raise Exception, "Not Implemented"
end

def hashToArray(hash)
    raise Exception, "Not Implemented"
end
