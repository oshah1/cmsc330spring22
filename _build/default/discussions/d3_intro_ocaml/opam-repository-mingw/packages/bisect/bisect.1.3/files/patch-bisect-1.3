--- ./configure
+++ ./configure
@@ -72,6 +72,6 @@
 echo "WARNINGS=$devel" >> Makefile.config
 echo "NO_CAMLP4=$no_camlp4" >> Makefile.config
 echo "PPX=$ppx" >> Makefile.config
-echo "MAKE_QUIET=$make_quiet" >> Makefile.config
+echo "MAKE_QUIET= --no-print-directory" >> Makefile.config
 echo "" >> Makefile.config
 echo 'Makefile.config successfully created'
--- ./Makefile
+++ ./Makefile
@@ -20,7 +20,7 @@
 
 # PATHS
 
-PATH_BASE=`pwd`
+PATH_BASE=$(shell cygpath -m "$$(readlink -f . )")
 PATH_BUILD=$(PATH_BASE)/_build
 PATH_OCAMLDOC=$(PATH_BASE)/ocamldoc
 PATH_SRC=$(PATH_BASE)/src
@@ -31,7 +31,7 @@
 # DEFINITIONS
 
 PROJECT_NAME=bisect
-OCAMLBUILD=$(PATH_OCAML_PREFIX)/bin/ocamlbuild
+OCAMLBUILD=ocamlbuild
 OCAMLBUILD_ENV=WARNINGS=$(WARNINGS) PATH_OCAML_PREFIX=$(PATH_OCAML_PREFIX)
 OCAMLBUILD_FLAGS=-classic-display -no-links
 MODULES_ODOCL=$(PROJECT_NAME).odocl
@@ -84,15 +84,16 @@
 	if [ "$(PPX)" = "TRUE" ]; then \
 	  cp $(PATH_BUILD)/src/syntax/bisect_ppx.byte $(PATH_OCAML_PREFIX)/bin; \
 	fi; \
-	(test -x $(PATH_OCAML_PREFIX)/bin/ocamlopt && cp $(PATH_BUILD)/src/report/report.native $(PATH_OCAML_PREFIX)/bin/bisect-report.opt || true); \
+	(which ocamlopt && cp $(PATH_BUILD)/src/report/report.native $(PATH_OCAML_PREFIX)/bin/bisect-report.opt || true); \
 	if [ -x "$(PATH_OCAMLFIND)" ]; then \
 	  $(PATH_OCAMLFIND) query $(PROJECT_NAME) && $(PATH_OCAMLFIND) remove $(PROJECT_NAME) || true; \
 	  $(PATH_OCAMLFIND) install $(PROJECT_NAME) META -optional \
 	    $(PATH_BUILD)/$(PROJECT_NAME)_pp.cmo \
-	    $(PATH_BUILD)/src/$(PROJECT_NAME)Thread.cm* \
-	    $(PATH_BUILD)/src/$(PROJECT_NAME)Thread.o \
-	    $(PATH_BUILD)/src/$(PROJECT_NAME)Thread.jo \
+	    $(PATH_BUILD)/src/threads/$(PROJECT_NAME)Thread.cm* \
+	    $(PATH_BUILD)/src/threads/$(PROJECT_NAME)Thread.o \
+	    $(PATH_BUILD)/src/threads/$(PROJECT_NAME)Thread.jo \
 	    $(PATH_BUILD)/$(PROJECT_NAME).a \
+	    $(PATH_BUILD)/$(PROJECT_NAME).o \
 	    $(PATH_BUILD)/$(PROJECT_NAME).cma \
 	    $(PATH_BUILD)/$(PROJECT_NAME).cmi \
 	    $(PATH_BUILD)/$(PROJECT_NAME).cmo \
@@ -106,7 +107,7 @@
 	    cp $(PATH_BUILD)/$(PROJECT_NAME)_pp.cmo $(PATH_INSTALL); \
 	  fi; \
 	  for ext in cmi cmo cmx o cmj jo; do \
-	    test -f $(PATH_BUILD)/src/$(PROJECT_NAME)Thread.$$ext && cp $(PATH_BUILD)/src/$(PROJECT_NAME)Thread.$$ext $(PATH_INSTALL) || true; \
+	    test -f $(PATH_BUILD)/src/threads/$(PROJECT_NAME)Thread.$$ext && cp $(PATH_BUILD)/src/threads/$(PROJECT_NAME)Thread.$$ext $(PATH_INSTALL) || true; \
 	  done; \
 	  for ext in a cmi cmo cmx cma cmxa cmja ja; do \
 	    test -f $(PATH_BUILD)/$(PROJECT_NAME).$$ext && cp $(PATH_BUILD)/$(PROJECT_NAME).$$ext $(PATH_INSTALL) || true; \
@@ -115,7 +116,7 @@
 
 generate: FORCE
 	echo '$(PROJECT_NAME).cma' > $(PROJECT_NAME).itarget
-	(test -x $(PATH_OCAML_PREFIX)/bin/ocamlopt && echo '$(PROJECT_NAME).cmxa' >> $(PROJECT_NAME).itarget) || true
-	(test -x $(PATH_OCAML_PREFIX)/bin/ocamljava && echo '$(PROJECT_NAME).cmja' >> $(PROJECT_NAME).itarget) || true
+	(which ocamlopt && echo '$(PROJECT_NAME).cmxa' >> $(PROJECT_NAME).itarget) || true
+	(which ocamljava && echo '$(PROJECT_NAME).cmja' >> $(PROJECT_NAME).itarget) || true
 
 FORCE:
--- ./myocamlbuild.ml
+++ ./myocamlbuild.ml
@@ -63,16 +63,14 @@
     let src = Pathname.mk src in
     let dst = Pathname.mk dst in
     let dir = Pathname.dirname dst in
-    let cmd = Printf.sprintf "mkdir -p %s" (Pathname.to_string dir) in
-    if Sys.command cmd <> 0 then failwith ("cannot run " ^ cmd);
+    let cmd = Printf.sprintf "mkdir %s" (Pathname.to_string dir) in
+    if Sys.file_exists dir = false then  (
+      if Sys.command cmd <> 0 then failwith ("cannot run " ^ cmd);
+    );
     cp src dst in
   dispatch begin function
     | After_rules ->
-        let camlp4of =
-          try
-            let path_bin = Filename.concat (Sys.getenv "PATH_OCAML_PREFIX") "bin" in
-            Filename.concat path_bin "camlp4of"
-          with _ -> "camlp4of" in
+        let camlp4of = "camlp4of" in
         flag ["ocaml"; "compile"; "pp_camlp4of"] (S[A"-pp"; A camlp4of]);
         flag ["ocaml"; "pp:dep"; "pp_camlp4of"] (S[A camlp4of]);
         flag ["ocaml"; "compile"; "use_compiler_libs"] (S[A"-I"; A"+compiler-libs"]);
--- ./tests/camlp4-comments/Makefile
+++ ./tests/camlp4-comments/Makefile
@@ -2,7 +2,7 @@
 	@rm -fr *.result *.cmp
 	@for file in *.ml; do \
 		echo "     testing '$$file' ..."; \
-		$(PATH_OCAML_BIN)/camlp4o$(EXE_SUFFIX) str.cma ../../_build/bisect_pp.cmo $$file -o $$file.result; \
-		diff -q $$file.reference $$file.result || exit 1; \
+		$(PATH_OCAML_BIN)/camlp4o$(EXE_SUFFIX) -printer o str.cma ../../_build/bisect_pp.cmo $$file -o $$file.result; \
+		diff -b -q $$file.reference $$file.result || exit 1; \
 	done
 	@rm -fr *.result *.cmp
--- ./tests/camlp4-exclude/Makefile
+++ ./tests/camlp4-exclude/Makefile
@@ -2,7 +2,7 @@
 	@rm -fr *.result *.cmp
 	@for file in *.ml; do \
 		echo "     testing '$$file' ..."; \
-		$(PATH_OCAML_BIN)/camlp4o$(EXE_SUFFIX) str.cma ../../_build/bisect_pp.cmo $$file -exclude 'f.*' -o $$file.result; \
-		diff -q $$file.reference $$file.result || exit 1; \
+		$(PATH_OCAML_BIN)/camlp4o$(EXE_SUFFIX) -printer o str.cma ../../_build/bisect_pp.cmo $$file -exclude 'f.*' -o $$file.result; \
+		diff -b -q $$file.reference $$file.result || exit 1; \
 	done
 	@rm -fr *.result *.cmp
--- ./tests/camlp4-exclude-file/Makefile
+++ ./tests/camlp4-exclude-file/Makefile
@@ -2,7 +2,7 @@
 	@rm -fr *.result *.cmp
 	@for file in *.ml; do \
 		echo "     testing '$$file' ..."; \
-		$(PATH_OCAML_BIN)/camlp4o$(EXE_SUFFIX) str.cma ../../_build/bisect_pp.cmo $$file -exclude-file exclusions -o $$file.result; \
-		diff -q $$file.reference $$file.result || exit 1; \
+		$(PATH_OCAML_BIN)/camlp4o$(EXE_SUFFIX) -printer o str.cma ../../_build/bisect_pp.cmo $$file -exclude-file exclusions -o $$file.result; \
+		diff -b -q $$file.reference $$file.result || exit 1; \
 	done
 	@rm -fr *.result *.cmp
--- ./tests/camlp4-instrument/Makefile
+++ ./tests/camlp4-instrument/Makefile
@@ -2,7 +2,7 @@
 	@rm -fr *.result *.cmp
 	@for file in *.ml; do \
 		echo "     testing '$$file' ..."; \
-		$(PATH_OCAML_BIN)/camlp4o$(EXE_SUFFIX) str.cma ../../_build/bisect_pp.cmo $$file -o $$file.result; \
-		diff -q $$file.reference $$file.result || exit 1; \
+		$(PATH_OCAML_BIN)/camlp4o$(EXE_SUFFIX) -printer o str.cma ../../_build/bisect_pp.cmo $$file -o $$file.result; \
+		diff -b -q $$file.reference $$file.result || exit 1; \
 	done
 	@rm -fr *.result *.cmp
--- ./tests/camlp4-instrument-fast/Makefile
+++ ./tests/camlp4-instrument-fast/Makefile
@@ -2,7 +2,7 @@
 	@rm -fr *.result *.cmp
 	@for file in *.ml; do \
 		echo "     testing '$$file' ..."; \
-		$(PATH_OCAML_BIN)/camlp4o$(EXE_SUFFIX) str.cma ../../_build/bisect_pp.cmo -mode fast $$file -o $$file.result; \
-		diff -q $$file.reference $$file.result || exit 1; \
+		$(PATH_OCAML_BIN)/camlp4o$(EXE_SUFFIX) -printer o str.cma ../../_build/bisect_pp.cmo -mode fast $$file -o $$file.result; \
+		diff -b -q $$file.reference $$file.result || exit 1; \
 	done
 	@rm -fr *.result *.cmp
--- ./tests/combine-expr/Makefile
+++ ./tests/combine-expr/Makefile
@@ -20,6 +20,6 @@
 	@$(REPORT) -dump combined3-result.dump -combine-expr 'notnull(sum(<first*.out>))*2 + notnull(sum(<second*.out>))'
 	@(for name in first second combined1 combined2 combined3; do \
 		echo "     testing '$$name' ouput ..."; \
-		diff -q $$name-result.dump $$name-reference.dump && rm -f $$name-result.dump; \
+		diff -b -q $$name-result.dump $$name-reference.dump && rm -f $$name-result.dump; \
 	done || exit 0)
 	@rm -f *.cm* *.out *.o *.jo $(EXECUTABLE)
