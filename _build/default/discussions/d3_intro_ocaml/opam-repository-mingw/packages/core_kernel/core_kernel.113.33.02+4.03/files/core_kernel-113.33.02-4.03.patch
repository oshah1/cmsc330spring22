--- ./config/detect.sh
+++ ./config/detect.sh
@@ -4,14 +4,27 @@
 
 set -e
 
-if ld -lm -shared --wrap caml_modify -o /dev/null 2>/dev/null; then
+
+system="$( ocamlfind ocamlc -config | awk '/^system:/ {print $2}')"
+case "$system" in
+    win*)
+        ld_wrap_possible=false
+        posix_timers_possible=false
+        ;;
+    mingw*)
+        ld_wrap_possible=false
+        posix_timers_possible=false
+        ;;
+    *)
+
+        if ld -lm -shared --wrap caml_modify -o /dev/null 2>/dev/null; then
     ld_wrap_possible=true
-else
+        else
     ld_wrap_possible=false
-fi
+        fi
 
-ptimer=`getconf _POSIX_TIMERS || echo undefined`
-case $ptimer in
+        ptimer=`getconf _POSIX_TIMERS || echo undefined`
+        case $ptimer in
     undefined)
         posix_timers_possible=false
         ;;
@@ -22,6 +35,8 @@
             posix_timers_possible=false
         fi
         ;;
+        esac
+        ;;
 esac
 
 if [ -e setup.data ]; then
--- ./config/discover.sh
+++ ./config/discover.sh
@@ -7,7 +7,7 @@
     exit 2
 fi
 
-OCAMLC="$1"
+OCAMLC="$(cygpath -m "$1")"
 ML_OUTFILE="$2"
 C_OUTFILE="$3"
 shift 3
@@ -18,9 +18,19 @@
 
 SRC=config/test.c
 OUT=config/test.out
-trap "rm -f $OUT" EXIT
+trap "rm -f $OUT test.i" EXIT
 
-$OCAMLC -ccopt -E $OCAML_CFLAGS -c $SRC | grep '^"OUT:[^"]*"$' | sed 's/"OUT:\([^"]*\)"/\1/' | tee > $OUT
+system="$( "$OCAMLC" -config | awk '/^system:/ {print $2}')"
+case "$system" in
+    win*)
+        "$OCAMLC" -ccopt /P $OCAML_CFLAGS -c $SRC
+        dos2unix test.i
+        cat test.i | grep '^"OUT:[^"]*"$' | sed 's/"OUT:\([^"]*\)"/\1/' | tee > $OUT
+        ;;
+    *)
+        "$OCAMLC" -ccopt -E $OCAML_CFLAGS -c $SRC | grep '^"OUT:[^"]*"$' | sed 's/"OUT:\([^"]*\)"/\1/' | tee > $OUT
+        ;;
+esac
 
 mv "$OUT" "$ML_OUTFILE"
 
--- ./src/bigstring_marshal_stubs.c
+++ ./src/bigstring_marshal_stubs.c
@@ -1,5 +1,7 @@
 #include <string.h>
+#ifndef _MSC_VER
 #include <unistd.h>
+#endif
 #include <errno.h>
 
 #include <caml/alloc.h>
@@ -30,12 +32,12 @@
 }
 
 extern CAMLprim void
-caml_output_value_to_malloc(value v, value v_flags, char **buf_p, long *len);
+caml_output_value_to_malloc(value v, value v_flags, char **buf_p, intnat *len);
 
 CAMLprim value bigstring_marshal_stub(value v, value v_flags)
 {
   char *buf;
-  long len;
+  intnat len;
   int alloc_flags = CAML_BA_CHAR | CAML_BA_C_LAYOUT | CAML_BA_MANAGED;
   caml_output_value_to_malloc(v, v_flags, &buf, &len);
   return caml_ba_alloc(alloc_flags, 1, buf, &len);
--- ./src/bigstring_stubs.c
+++ ./src/bigstring_stubs.c
@@ -11,16 +11,37 @@
 #endif
 
 #include <string.h>
+#ifndef _MSC_VER
 #include <unistd.h>
+#include <stdint.h>
+#else
+#include <stdlib.h>
+#endif
+
 #include <errno.h>
 #include <assert.h>
-#include <stdint.h>
+
 
 #ifdef __APPLE__
 #include <libkern/OSByteOrder.h>
 #define bswap_16 OSSwapInt16
 #define bswap_32 OSSwapInt32
 #define bswap_64 OSSwapInt64
+#elif __MINGW32__
+#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8))
+#define bswap_16 __builtin_bswap16
+#else
+static inline uint16_t bswap_16 (uint16_t x)
+{
+    return (x << 8) | (x >> 8);
+}
+#endif
+#define bswap_32 __builtin_bswap32
+#define bswap_64 __builtin_bswap64
+#elif _MSC_VER
+#define bswap_16 _byteswap_ushort
+#define bswap_32 _byteswap_ulong
+#define bswap_64 _byteswap_uint64
 #elif __GLIBC__
 #include <byteswap.h>
 #include <malloc.h>
@@ -152,7 +173,7 @@
                               value v_pos, value v_len)
 {
   char *start, *r;
-  long ret;
+  intnat ret;
 
   start = get_bstr(v_str, v_pos);
   r = (char*) memchr(start, Int_val(v_needle), Long_val(v_len));
--- ./src/core_gc_stubs.c
+++ ./src/core_gc_stubs.c
@@ -16,63 +16,69 @@
 extern intnat caml_stat_compactions;
 extern intnat caml_stat_heap_chunks;
 
-static long minor_words(void)
+static intnat minor_words(void)
 {
-  return (long) (caml_stat_minor_words +
+  return (intnat) (caml_stat_minor_words +
             (double) Wsize_bsize (caml_young_end - caml_young_ptr));
 }
 
-CAMLprim value core_kernel_gc_minor_words(value unit __attribute__((unused)))
+#ifndef _MSC_VER
+#define UNUSED __attribute__((unused))
+#else
+#define UNUSED
+#endif
+
+CAMLprim value core_kernel_gc_minor_words(value unit UNUSED)
 {
   return Val_long(minor_words());
 }
 
-static long major_words(void)
+static intnat major_words(void)
 {
-  return (long) (caml_stat_major_words + (double) caml_allocated_words);
+  return (intnat) (caml_stat_major_words + (double) caml_allocated_words);
 }
 
-CAMLprim value core_kernel_gc_major_words(value unit __attribute__((unused)))
+CAMLprim value core_kernel_gc_major_words(value unit UNUSED)
 {
   return Val_long(major_words());
 }
 
-CAMLprim value core_kernel_gc_promoted_words(value unit __attribute__((unused)))
+CAMLprim value core_kernel_gc_promoted_words(value unit UNUSED)
 {
-  return Val_long((long) caml_stat_promoted_words);
+  return Val_long((intnat) caml_stat_promoted_words);
 }
 
-CAMLprim value core_kernel_gc_minor_collections(value unit __attribute__((unused)))
+CAMLprim value core_kernel_gc_minor_collections(value unit UNUSED)
 {
   return Val_long(caml_stat_minor_collections);
 }
 
-CAMLprim value core_kernel_gc_major_collections(value unit __attribute__((unused)))
+CAMLprim value core_kernel_gc_major_collections(value unit UNUSED)
 {
   return Val_long(caml_stat_major_collections);
 }
 
-CAMLprim value core_kernel_gc_heap_words(value unit __attribute__((unused)))
+CAMLprim value core_kernel_gc_heap_words(value unit UNUSED)
 {
   return Val_long(caml_stat_heap_wsz);
 }
 
-CAMLprim value core_kernel_gc_heap_chunks(value unit __attribute__((unused)))
+CAMLprim value core_kernel_gc_heap_chunks(value unit UNUSED)
 {
   return Val_long(caml_stat_heap_chunks);
 }
 
-CAMLprim value core_kernel_gc_compactions(value unit __attribute__((unused)))
+CAMLprim value core_kernel_gc_compactions(value unit UNUSED)
 {
   return Val_long(caml_stat_compactions);
 }
 
-CAMLprim value core_kernel_gc_top_heap_words(value unit __attribute__((unused)))
+CAMLprim value core_kernel_gc_top_heap_words(value unit UNUSED)
 {
   return Val_long(caml_stat_top_heap_wsz);
 }
 
-CAMLprim value core_kernel_gc_major_plus_minor_words(value unit __attribute__((unused)))
+CAMLprim value core_kernel_gc_major_plus_minor_words(value unit UNUSED)
 {
   return Val_long(minor_words() + major_words());
 }
--- ./src/exn_stubs.c
+++ ./src/exn_stubs.c
@@ -2,7 +2,13 @@
 
 extern int caml_backtrace_pos;
 
-CAMLprim value clear_caml_backtrace_pos (value __attribute__((unused)) unit) {
+#ifndef _MSC_VER
+#define UNUSED __attribute__((unused))
+#else
+#define UNUSED
+#endif
+
+CAMLprim value clear_caml_backtrace_pos (value UNUSED unit) {
   caml_backtrace_pos = 0;
   return Val_unit;
 }
--- ./src/time_ns_stubs.c
+++ ./src/time_ns_stubs.c
@@ -11,8 +11,9 @@
 #include <caml/signals.h>
 #include <caml/unixsupport.h>
 
-#include <time.h>
+#ifndef _MSC_VER
 #include <stdint.h>
+#endif
 
 #include "ocaml_utils.h"
 #include "config.h"
@@ -47,7 +48,33 @@
 #else
 
 #include <sys/types.h>
+#ifndef _MSC_VER
 #include <sys/time.h>
+#endif
+#ifdef _MSC_VER
+#include <time.h>
+
+#define DELTA_EPOCH_IN_MICROSECS  116444736000000000Ui64
+
+static int gettimeofday(struct timeval *tp, void *tz)
+{
+  FILETIME    file_time;
+  SYSTEMTIME  system_time;
+  ULARGE_INTEGER ularge;
+  (void)tz;
+
+  GetSystemTime(&system_time);
+  SystemTimeToFileTime(&system_time, &file_time);
+  ularge.LowPart = file_time.dwLowDateTime;
+  ularge.HighPart = file_time.dwHighDateTime;
+
+  tp->tv_sec = (long) ((ularge.QuadPart - DELTA_EPOCH_IN_MICROSECS) / 10000000L);
+  tp->tv_usec = (long) (system_time.wMilliseconds * 1000);
+
+  return 0;
+}
+
+#endif
 
 CAMLprim value core_kernel_time_ns_gettime_or_zero()
 {
