--- ./configure
+++ ./configure
@@ -596,7 +596,6 @@
 OCAMLMKLIB
 OCAMLDOC
 OCAMLINSTALL
-CAMLP4O
 OCAMLWEB
 OCAMLYACC
 OCAMLLEXDOTOPT
@@ -628,6 +627,7 @@
 docdir
 oldincludedir
 includedir
+runstatedir
 localstatedir
 sharedstatedir
 sysconfdir
@@ -694,6 +694,7 @@
 sysconfdir='${prefix}/etc'
 sharedstatedir='${prefix}/com'
 localstatedir='${prefix}/var'
+runstatedir='${localstatedir}/run'
 includedir='${prefix}/include'
 oldincludedir='/usr/include'
 docdir='${datarootdir}/doc/${PACKAGE}'
@@ -946,6 +947,15 @@
   | -silent | --silent | --silen | --sile | --sil)
     silent=yes ;;
 
+  -runstatedir | --runstatedir | --runstatedi | --runstated \
+  | --runstate | --runstat | --runsta | --runst | --runs \
+  | --run | --ru | --r)
+    ac_prev=runstatedir ;;
+  -runstatedir=* | --runstatedir=* | --runstatedi=* | --runstated=* \
+  | --runstate=* | --runstat=* | --runsta=* | --runst=* | --runs=* \
+  | --run=* | --ru=* | --r=*)
+    runstatedir=$ac_optarg ;;
+
   -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)
     ac_prev=sbindir ;;
   -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \
@@ -1083,7 +1093,7 @@
 for ac_var in	exec_prefix prefix bindir sbindir libexecdir datarootdir \
 		datadir sysconfdir sharedstatedir localstatedir includedir \
 		oldincludedir docdir infodir htmldir dvidir pdfdir psdir \
-		libdir localedir mandir
+		libdir localedir mandir runstatedir
 do
   eval ac_val=\$$ac_var
   # Remove trailing slashes.
@@ -1236,6 +1246,7 @@
   --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
   --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
   --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
+  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]
   --libdir=DIR            object code libraries [EPREFIX/lib]
   --includedir=DIR        C header files [PREFIX/include]
   --oldincludedir=DIR     C header files for non-gcc [/usr/include]
@@ -1870,10 +1881,10 @@
 
 # Hack for MinGW
 
-WS232=`gcc -print-file-name=libws2_32.a`
-if test -e "$WS232" ; then
-   COPTIONS="-ccopt -L`dirname $WS232`"
-fi
+#WS232=`gcc -print-file-name=libws2_32.a`
+#if test -e "$WS232" ; then
+#   COPTIONS="-ccopt -L`dirname $WS232`"
+#fi
 
 # Check for Ocaml compilers
 
@@ -2303,47 +2314,10 @@
 
 
 
-# Extract the first word of "camlp4o", so it can be a program name with args.
-set dummy camlp4o; ac_word=$2
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
-$as_echo_n "checking for $ac_word... " >&6; }
-if ${ac_cv_prog_CAMLP4O+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-  if test -n "$CAMLP4O"; then
-  ac_cv_prog_CAMLP4O="$CAMLP4O" # Let the user override the test.
-else
-as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-    for ac_exec_ext in '' $ac_executable_extensions; do
-  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_prog_CAMLP4O="camlp4o"
-    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
-    break 2
-  fi
-done
-  done
-IFS=$as_save_IFS
-
-  test -z "$ac_cv_prog_CAMLP4O" && ac_cv_prog_CAMLP4O="no"
-fi
-fi
-CAMLP4O=$ac_cv_prog_CAMLP4O
-if test -n "$CAMLP4O"; then
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CAMLP4O" >&5
-$as_echo "$CAMLP4O" >&6; }
-else
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
-$as_echo "no" >&6; }
-fi
-
-
-if test "$CAMLP4O" = no ; then
-	as_fn_error $? "Cannot find camlp4o." "$LINENO" 5
-fi
+#AC_CHECK_PROG(CAMLP4O,camlp4o,camlp4o,no)
+#if test "$CAMLP4O" = no ; then
+#	AC_MSG_ERROR(Cannot find camlp4o.)
+#fi
 
 # Extract the first word of "ocamlfind", so it can be a program name with args.
 set dummy ocamlfind; ac_word=$2
@@ -2462,7 +2436,7 @@
 
 
 
-
+#AC_SUBST(CAMLP4O)
 
 
 
--- ./configure.in
+++ ./configure.in
@@ -45,10 +45,10 @@
 
 # Hack for MinGW
 
-WS232=`gcc -print-file-name=libws2_32.a`
-if test -e "$WS232" ; then
-   COPTIONS="-ccopt -L`dirname $WS232`"
-fi
+#WS232=`gcc -print-file-name=libws2_32.a`
+#if test -e "$WS232" ; then
+#   COPTIONS="-ccopt -L`dirname $WS232`"
+#fi
 
 # Check for Ocaml compilers
 
@@ -135,10 +135,10 @@
 
 AC_CHECK_PROG(OCAMLWEB,ocamlweb,ocamlweb,true)
 
-AC_CHECK_PROG(CAMLP4O,camlp4o,camlp4o,no)
-if test "$CAMLP4O" = no ; then
-	AC_MSG_ERROR(Cannot find camlp4o.)
-fi
+#AC_CHECK_PROG(CAMLP4O,camlp4o,camlp4o,no)
+#if test "$CAMLP4O" = no ; then
+#	AC_MSG_ERROR(Cannot find camlp4o.)
+#fi
 
 AC_CHECK_PROG(OCAMLINSTALL,ocamlfind,install-with-ocamlfind,install-without-ocamlfind)
 
@@ -174,7 +174,7 @@
 AC_SUBST(OCAMLVERSION)
 AC_SUBST(OCAMLLIB)
 AC_SUBST(OCAMLWEB)
-AC_SUBST(CAMLP4O)
+#AC_SUBST(CAMLP4O)
 AC_SUBST(DEBUG)
 AC_SUBST(ASSERT)
 AC_SUBST(PROFILE)
--- ./Makefile.in
+++ ./Makefile.in
@@ -33,15 +33,14 @@
 # other variables set by ./configure
 CPPO = @CPPO@
 FGREP = @FGREP@
-OCAMLC   = @OCAMLC@
-OCAMLOPT = @OCAMLOPT@
+OCAMLC   = @OCAMLC@ -g
+OCAMLOPT = @OCAMLOPT@ -g
 OCAMLYACC = @OCAMLYACC@
 OCAMLLEX = @OCAMLLEX@
 OCAMLDEP = @OCAMLDEP@ -slash
 OCAMLLIB = @OCAMLLIB@
 OCAMLBEST= @OCAMLBEST@
 OCAMLVERSION = @OCAMLVERSION@
-CAMLP4O = -pp "@CAMLP4O@ -I $(OCAMLLIB)"
 INSTALL = @OCAMLINSTALL@
 UNINSTALL = un@OCAMLINSTALL@
 OCAMLDOC = @OCAMLDOC@
@@ -121,7 +120,7 @@
 internal/uReStrParser.cmx : internal/uReStrParser.cmi
 
 byte : camomile.cma camomileLibrary.cma
-opt : camomile.cmxa camomileLibrary.cmxa
+opt : camomile.cmxa camomile.cmxs camomileLibrary.cmxa
 
 $(NOOBJ_INT:.cmi=.cmo) : %.cmo : %.mli %.cmi
 	$(OCAMLC) -c $(BFLAGS) -impl $<
@@ -135,10 +134,12 @@
 camomileLibrary.ml : camomileLibrary.mlp $(SUBMLI)
 	$(CPPO) $(SUBDIR) -o camomileLibrary.ml camomileLibrary.mlp 
 
-camomile.cma : $(OBJECTS) camomileLibrary.cmo camomileLibraryDefault.cmo camomileLibraryDyn.cmo
-	$(OCAMLC) -a -o camomile.cma $(OBJECTS) camomileLibrary.cmo camomileLibraryDefault.cmo camomileLibraryDyn.cmo
-camomile.cmxa : $(OPTOBJECTS) camomileLibrary.cmx camomileLibraryDefault.cmx camomileLibraryDyn.cmx
-	$(OCAMLOPT) -a -o camomile.cmxa $(OPTOBJECTS) camomileLibrary.cmx camomileLibraryDefault.cmx camomileLibraryDyn.cmx
+camomile.cma : $(OBJECTS) camomileLibrary.cmo camomileLibraryDyn.cmo #camomileLibraryDefault.cmo
+	$(OCAMLC) -a -o camomile.cma $(OBJECTS) camomileLibrary.cmo camomileLibraryDyn.cmo #camomileLibraryDefault.cmo
+camomile.cmxa : $(OPTOBJECTS) camomileLibrary.cmx camomileLibraryDyn.cmx #camomileLibraryDefault.cmx
+	$(OCAMLOPT) -a -o camomile.cmxa $(OPTOBJECTS) camomileLibrary.cmx camomileLibraryDyn.cmx #camomileLibraryDefault.cmx
+camomile.cmxs : camomile.cmxa
+	$(OCAMLOPT) -shared -linkall -o camomile.cmxs camomile.cmxa
 
 camomileLibrary.cma : $(OBJECTS) camomileLibrary.cmo
 	$(OCAMLC) -a -o camomileLibrary.cma $(OBJECTS) camomileLibrary.cmo
@@ -151,19 +152,19 @@
 htdoc : dochtml
 dochtml : 
 	mkdir -p dochtml
-	$(OCAMLDOC) $(INCLUDES) -html -d dochtml camomileLibrary.mli camomileLibraryDefault.mli camomileLibraryDyn.mli
+	$(OCAMLDOC) $(INCLUDES) -html -d dochtml camomileLibrary.mli camomileLibraryDyn.mli #camomileLibraryDefault.mli
 
 doclatex :
 	mkdir -p doclatex
-	$(OCAMLDOC) $(INCLUDES) -latex -o doclatex/camomile.tex camomileLibrary.mli camomileLibraryDefault.mli camomileLibraryDyn.mli
+	$(OCAMLDOC) $(INCLUDES) -latex -o doclatex/camomile.tex camomileLibrary.mli camomileLibraryDyn.mli #camomileLibraryDefault.mli
 
 doctexi : 
 	mkdir -p doctexi
-	$(OCAMLDOC) $(INCLUDES) -texi -o doctexi/camomile.texi camomileLibrary.mli camomileLibraryDefault.mli camomileLibraryDyn.mli
+	$(OCAMLDOC) $(INCLUDES) -texi -o doctexi/camomile.texi camomileLibrary.mli camomileLibraryDyn.mli #camomileLibraryDefault.mli
 
 man : 
 	mkdir -p man
-	$(OCAMLDOC) $(INCLUDES) -man -d man camomileLibrary.mli camomileLibraryDefault.mli camomileLibraryDyn.mli
+	$(OCAMLDOC) $(INCLUDES) -man -d man camomileLibrary.mli camomileLibraryDyn.mli #camomileLibraryDefault.mli
 
 # Configuration File
 ############################
@@ -214,12 +215,6 @@
 $(OPTTOOLS) : %.opt : toolslib.cmxa %.cmx
 	$(OCAMLOPT) $(OFLAGS) -o $@ $(OPTTOOLSLIB) $*.cmx
 
-tools/camomilelocaledef.cmo : tools/camomilelocaledef.ml
-	$(OCAMLC) $(CAMLP4O) -c $(BFLAGS) tools/camomilelocaledef.ml
-
-tools/camomilelocaledef.cmx : tools/camomilelocaledef.ml
-	$(OCAMLOPT) $(CAMLP4O) -c $(OFLAGS) tools/camomilelocaledef.ml
-
 # Compile unidata
 ###################################################################
 
@@ -384,35 +379,37 @@
 # Installation and export
 ###################################################################
 
-MLI = camomileLibrary.mli camomileLibraryDefault.mli camomileLibraryDyn.mli
+MLI = camomileLibrary.mli camomileLibraryDyn.mli #camomileLibraryDefault.mli
 
 install: $(INSTALL) install-data
 
 install-without-ocamlfind:
 	mkdir -p $(OCAMLLIB)
 	cp -f camomileLibrary.cmi '$(OCAMLLIB)'
-	cp -f camomileLibraryDefault.cmi '$(OCAMLLIB)'	
+#	cp -f camomileLibraryDefault.cmi '$(OCAMLLIB)'
 	cp -f camomileLibraryDyn.cmi '$(OCAMLLIB)'	
 	if [ -f camomileLibrary.cmx ]; then cp -f camomileLibrary.cmx '$(OCAMLLIB)'; fi
 	if [ -f camomileLibrary.cma ]; then cp -f camomileLibrary.cma '$(OCAMLLIB)'; fi
 	if [ -f camomileLibrary.cmxa ]; then cp -f camomileLibrary.cmxa '$(OCAMLLIB)'; fi
-	if [ -f camomileLibraryDefault.cmx ]; then cp -f camomileLibraryDefault.cmx '$(OCAMLLIB)'; fi
+#	if [ -f camomileLibraryDefault.cmx ]; then cp -f camomileLibraryDefault.cmx '$(OCAMLLIB)'; fi
 	if [ -f camomileLibraryDyn.cmx ]; then cp -f camomileLibraryDyn.cmx '$(OCAMLLIB)'; fi
 	if [ -f camomile.cma ]; then cp -f camomile.cma '$(OCAMLLIB)'; fi
 	if [ -f camomile.cmxa ]; then cp -f camomile.cmxa '$(OCAMLLIB)'; fi
+	if [ -f camomile.cmxs ]; then cp -f camomile.cmxs '$(OCAMLLIB)'; fi
 	if [ -f camomile.a ]; then cp -f camomile.a '$(OCAMLLIB)'; fi
 
 install-with-ocamlfind:
-	files= &&\
-	if [ -f camomileLibrary.cmx ]; then files=camomileLibrary.cmx; fi && \
+	files="$(wildcard public/*.cmx internal/*.cmx)" &&\
+	if [ -f camomileLibrary.cmx ]; then files="camomileLibrary.cmx $$files"; fi && \
 	if [ -f camomileLibrary.cma ]; then files="camomileLibrary.cma $$files"; fi && \
 	if [ -f camomileLibrary.cmxa ]; then files="camomileLibrary.cmxa $$files"; fi && \
 	if [ -f camomileLibraryDefault.cmx ]; then files="camomileLibraryDefault.cmx $$files"; fi && \
 	if [ -f camomileLibraryDyn.cmx ]; then files="camomileLibraryDyn.cmx $$files"; fi && \
 	if [ -f camomile.cma ]; then files="camomile.cma $$files"; fi&& \
 	if [ -f camomile.cmxa ]; then files="camomile.cmxa $$files"; fi&& \
+	if [ -f camomile.cmxs ]; then files="camomile.cmxs $$files"; fi&& \
 	if [ -f camomile.a ]; then files="camomile.a $$files"; fi && \
-	ocamlfind install camomile $$files META $(MLI) camomileLibrary.cmi camomileLibraryDefault.cmi camomileLibraryDyn.cmi
+	ocamlfind install camomile $$files META $(MLI) camomileLibrary.cmi camomileLibraryDyn.cmi -optional public/*.cmx #camomileLibraryDefault.cmi
 
 install-data:
 	mkdir -p '$(DATADIR)'
@@ -431,7 +428,7 @@
 uninstall-without-ocamlfind:
 	rm -f '$(OCAMLLIB)'/camomile.*
 	rm -f '$(OCAMLLIB)'/camomileLibrary.*
-	rm -f '$(OCAMLLIB)'/camomileLibraryDefault.*
+#	rm -f '$(OCAMLLIB)'/camomileLibraryDefault.*
 	rm -f '$(OCAMLLIB)'/camomileLibraryDyn.*
 
 uninstall-with-ocamlfind:
@@ -507,7 +504,7 @@
 	otags */*.ml */*.mli *.ml *.mli
 
 clean :
-	rm -f *.cm[ioxa] *.cmxa *.o *.so *.a */*.cm[iox] */*.o pocaml\
+	rm -f *.cm[ioxa] *.cmxa *.cmxs *.o *.so *.a */*.cm[iox] */*.o pocaml\
 	*/*.byte */*.opt
 	rm -f database/*.mar
 	rm -f charmaps/*.mar
@@ -536,7 +533,7 @@
 	mappings/*.ml mappings/*.mli \
 	toolslib/*.ml toolslib/*.mli \
 	> .depend
-	$(OCAMLDEP) $(CAMLP4O) $(SUBDIR) \
+	$(OCAMLDEP) $(SUBDIR) \
 	tools/$(TOOLS:.byte=.ml) >> .depend
 
 include .depend
--- ./META.in
+++ ./META.in
@@ -5,4 +5,5 @@
 
 archive(byte)="camomile.cma"
 archive(native)="camomile.cmxa"
+archive(native, plugin)="camomile.cmxs"
 
--- ./tools/camomilelocaledef.ml
+++ ./tools/camomilelocaledef.ml
@@ -30,25 +25,27 @@
 (* License along with this library; if not, write to the Free Software *)
 (* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 *)
 (* USA *)
-
 (* You can contact the authour by sending email to *)
 (* yori@users.sourceforge.net *)
-
-
 open Toolslib
+  
 open AbsCe
+  
 module CE = CharEncoding.Configure(Camomileconfig)
+  
 module Info = UCharInfo.Make(Camomileconfig)
 
-let enc, readfile, dir =
+let (enc, readfile, dir) =
   let enc = ref CE.utf8 in
   let readfile = ref stdin in
-  let dir = ref Filename.current_dir_name in
-  Arg.parse
-    ["--enc", Arg.String (fun encname ->
-      enc := CE.of_name encname), "Encoding name";
-     "--file", Arg.String (fun filename ->
-       readfile := open_in_bin filename), "Reading file"]
+  let dir = ref Filename.current_dir_name
+  in
+    (Arg.parse
+       [ ("--enc", (Arg.String (fun encname -> enc := CE.of_name encname)),
+          "Encoding name");
+         ("--file",
+          (Arg.String (fun filename -> readfile := open_in_bin filename)),
+          "Reading file") ]
     (fun dirname -> dir := dirname)
     "camomilelocaledef --enc ENCNAME --file INPUTFILE DIRECTORY:\n\
     Read the localedef INPUTFILE using the encoding ENCNAME \
@@ -56,15 +53,21 @@
     If ENCNAME is ommited, UTF-8 is used.  \
     If INPUTFILE is ommited, reading from stdin. \
     If DIRECTORY is ommited, the current directory is used.";
-    !enc, !readfile, !dir
+     ((!enc), (!readfile), (!dir)))
 
 module Utf8Buffer = UTF8.Buf
+  
 module Utf8NF = UNF.Make(Camomileconfig)(UTF8)
 
-let ff = 0x000c				(*form feed*)
+let ff = 0x000c
+  
+(*form feed*)
 let cr = Char.code '\r'
+  
 let lf = Char.code '\n'
+  
 let nel = 0x0085
+  
 let tab = Char.code '\t'
 
 let backslash = Char.code '\\'
@@ -72,169 +77,252 @@
 let dq = Char.code '"'
 
 let backslash = Str.regexp "\\\\\\\\"
-let literal_1 = Str.regexp 
-    "\\\\[u]\\([0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]\\)"
 
-let literal_2 = Str.regexp
+let literal_1 =
+  Str.regexp "\\\\[u]\\([0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]\\)"
+  
+let literal_2 =
+  Str.regexp
     "\\\\[v]\\([0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]\\)"
 
 let unescape s =
   let s = 
-    Str.global_substitute literal_1 (fun _ ->
-      let n = int_of_string (Str.replace_matched "0x\\1" s) in
-      UTF8.init 1 (fun _ -> (UChar.chr_of_uint n))) 
+    Str.global_substitute literal_1
+      (fun _ ->
+         let n = int_of_string (Str.replace_matched "0x\\1" s)
+         in UTF8.init 1 (fun _ -> UChar.chr_of_uint n))
       s in
   let s = 
-    Str.global_substitute literal_2 (fun _ ->
-      let n = int_of_string (Str.replace_matched "0x\\1" s) in
-      UTF8.init 1 (fun _ -> (UChar.chr_of_uint n))) 
-      s in
-  Str.global_replace backslash "\\\\" s
-
-let rec stream_to_list_aux a s = (parser
-    [< 'e; rest >] -> stream_to_list_aux (e :: a) rest
-  | [< >] -> List.rev a) s
+    Str.global_substitute literal_2
+      (fun _ ->
+         let n = int_of_string (Str.replace_matched "0x\\1" s)
+         in UTF8.init 1 (fun _ -> UChar.chr_of_uint n))
+      s
+  in Str.global_replace backslash "\\\\" s
+  
+let rec stream_to_list_aux a s =
+  (fun (__strm : _ Stream.t) ->
+     match Stream.peek __strm with
+     | Some e -> (Stream.junk __strm; stream_to_list_aux (e :: a) __strm)
+     | _ -> List.rev a)
+    s
 
 let stream_to_list s = stream_to_list_aux [] s
 
-type token = 
-    Text of string
-  | Brace_r
-  | Brace_l
-  | Colon
-  | Comma
-
-let rec prep = parser 
-    [< 'u; rest >] ->
-      let c = try Some (UChar.char_of u) with _ -> None in
+type token = | Text of string | Brace_r | Brace_l | Colon | Comma
+
+let rec prep (__strm : _ Stream.t) =
+  match Stream.peek __strm with
+  | Some u ->
+      (Stream.junk __strm;
+       let rest = __strm in
+       let c = (try Some (UChar.char_of u) with | _ -> None)
+       in
       (match Info.general_category u with
-	`Cc | `Cf when c <> Some '\n' ->  prep rest
-      | ct -> [< '(c, ct, u); prep rest >])
-  | [< >] -> [< >]
-
-let rec remove_comment = parser
-    [< '( Some '/', _, _) as data; rest >] ->
-      (parser
-	  [< '(Some '/', _, _); rest >] -> comment rest
-	| [< '(Some '*', _, _); rest >] -> comment2 rest
-	| [< rest >] -> [< 'data; remove_comment rest >])
-	rest
-  | [< '( Some '"', _, _) as data; rest >]  -> 
-      [< 'data; in_quote rest >]
-  | [< 'data; rest >] -> [< 'data; remove_comment rest >]
-  | [< >] -> [< >]
-and comment = parser
-    [< '( Some ('\r' | '\n' | '\133'), _, _) | ( _, (`Zl | `Zp), _); rest >] 
-    -> remove_comment rest
-  | [< 'data; rest >] -> comment rest
-  | [< >] -> [< >]
-and comment2 = parser
-    [< '( Some '*', _, _) as data; rest >] -> (parser
-	[<  '(Some '/', _, _); rest >] -> remove_comment rest
-      |	[< rest >] -> comment2 rest) rest
-  | [< 'data; rest >] -> comment2 rest
-  | [< >] -> [< >]
-and in_quote = parser
-    [< '( Some '\\', _, _) as data1; 'data2; rest >] ->
-      [< 'data1; 'data2; in_quote rest >]
-  | [< '( Some '"', _, _) as data; rest >]  -> 
-      [<' data; remove_comment rest >]
-  | [< 'data; rest >] -> [< 'data; in_quote rest >]
-  | [< >] -> [< >]
-
-let rec merge_text = parser
-    [< 'Text s; rest >] -> do_merge s rest
-  | [< 'e; rest >] -> [< 'e; merge_text rest >]
-  | [< >] -> [< >]
-and do_merge s = parser
-    [< 'Text s'; rest >] -> do_merge (s ^ s') rest
-  | [< 'e; rest >] -> [< 'Text s; 'e; merge_text rest >]
-  | [< >] -> [< >]
+          | `Cc | `Cf when c <> (Some '\n') -> prep rest
+          | ct ->
+              Stream.lcons (fun _ -> (c, ct, u))
+                (Stream.slazy (fun _ -> prep rest))))
+  | _ -> Stream.sempty
+  
+let rec remove_comment (__strm : _ Stream.t) =
+  match Stream.peek __strm with
+  | Some (((Some '/', _, _) as data)) ->
+      (Stream.junk __strm;
+       let rest = __strm
+       in
+         (fun (__strm : _ Stream.t) ->
+            match Stream.peek __strm with
+            | Some ((Some '/', _, _)) -> (Stream.junk __strm; comment __strm)
+            | Some ((Some '*', _, _)) ->
+                (Stream.junk __strm; comment2 __strm)
+            | _ ->
+                let rest = __strm
+                in
+                  Stream.icons data
+                    (Stream.slazy (fun _ -> remove_comment rest)))
+           rest)
+  | Some (((Some '"', _, _) as data)) ->
+      (Stream.junk __strm;
+       let rest = __strm
+       in Stream.icons data (Stream.slazy (fun _ -> in_quote rest)))
+  | Some data ->
+      (Stream.junk __strm;
+       let rest = __strm
+       in Stream.icons data (Stream.slazy (fun _ -> remove_comment rest)))
+  | _ -> Stream.sempty
+and comment (__strm : _ Stream.t) =
+  match Stream.peek __strm with
+  | Some ((Some ('\r' | '\n' | '\133'), _, _) | (_, (`Zl | `Zp), _)) ->
+      (Stream.junk __strm; remove_comment __strm)
+  | Some data -> (Stream.junk __strm; comment __strm)
+  | _ -> Stream.sempty
+and comment2 (__strm : _ Stream.t) =
+  match Stream.peek __strm with
+  | Some (((Some '*', _, _) as data)) ->
+      (Stream.junk __strm;
+       let rest = __strm
+       in
+         (fun (__strm : _ Stream.t) ->
+            match Stream.peek __strm with
+            | Some ((Some '/', _, _)) ->
+                (Stream.junk __strm; remove_comment __strm)
+            | _ -> comment2 __strm)
+           rest)
+  | Some data -> (Stream.junk __strm; comment2 __strm)
+  | _ -> Stream.sempty
+and in_quote (__strm : _ Stream.t) =
+  match Stream.peek __strm with
+  | Some (((Some '\\', _, _) as data1)) ->
+      (Stream.junk __strm;
+       (match Stream.peek __strm with
+        | Some data2 ->
+            (Stream.junk __strm;
+             let rest = __strm
+             in
+               Stream.icons data1
+                 (Stream.icons data2 (Stream.slazy (fun _ -> in_quote rest))))
+        | _ -> raise (Stream.Error "")))
+  | Some (((Some '"', _, _) as data)) ->
+      (Stream.junk __strm;
+       let rest = __strm
+       in Stream.icons data (Stream.slazy (fun _ -> remove_comment rest)))
+  | Some data ->
+      (Stream.junk __strm;
+       let rest = __strm
+       in Stream.icons data (Stream.slazy (fun _ -> in_quote rest)))
+  | _ -> Stream.sempty
+  
+let rec merge_text (__strm : _ Stream.t) =
+  match Stream.peek __strm with
+  | Some (Text s) -> (Stream.junk __strm; do_merge s __strm)
+  | Some e ->
+      (Stream.junk __strm;
+       let rest = __strm
+       in Stream.icons e (Stream.slazy (fun _ -> merge_text rest)))
+  | _ -> Stream.sempty
+and do_merge s (__strm : _ Stream.t) =
+  match Stream.peek __strm with
+  | Some (Text s') -> (Stream.junk __strm; do_merge (s ^ s') __strm)
+  | Some e ->
+      (Stream.junk __strm;
+       let rest = __strm
+       in
+         Stream.icons (Text s)
+           (Stream.icons e (Stream.slazy (fun _ -> merge_text rest))))
+  | _ -> Stream.sempty
 
 let lexer s =
-  let rec parse = parser
-      [< '( Some '{', _, _); rest >] -> [< 'Brace_l; parse rest >]
-    | [< '( Some '}', _, _); rest >] -> [< 'Brace_r; parse rest >]
-    | [< '( Some ':', _, _); rest >] -> [< 'Colon; parse rest >]
-    | [< '( Some ',', _, _); rest >] -> [< 'Comma; parse rest >]
-    | [< '( Some '"', _, _); rest >] -> quote rest
-    | [< '( Some ('\r' | '\n' | '\133' | '\t'), _, _)
-    | ( _, (`Zs | `Zl | `Zp), _) ; rest >] ->
-	parse rest
-    | [< 'e; rest >] -> text [< 'e; rest >]
-    | [< >] -> [< >]
+  let rec parse (__strm : _ Stream.t) =
+    match Stream.peek __strm with
+    | Some ((Some '{', _, _)) ->
+        (Stream.junk __strm;
+         let rest = __strm
+         in Stream.icons Brace_l (Stream.slazy (fun _ -> parse rest)))
+    | Some ((Some '}', _, _)) ->
+        (Stream.junk __strm;
+         let rest = __strm
+         in Stream.icons Brace_r (Stream.slazy (fun _ -> parse rest)))
+    | Some ((Some ':', _, _)) ->
+        (Stream.junk __strm;
+         let rest = __strm
+         in Stream.icons Colon (Stream.slazy (fun _ -> parse rest)))
+    | Some ((Some ',', _, _)) ->
+        (Stream.junk __strm;
+         let rest = __strm
+         in Stream.icons Comma (Stream.slazy (fun _ -> parse rest)))
+    | Some ((Some '"', _, _)) -> (Stream.junk __strm; quote __strm)
+    | Some
+        ((Some ('\r' | '\n' | '\133' | '\t'), _, _) |
+           (_, (`Zs | `Zl | `Zp), _))
+        -> (Stream.junk __strm; parse __strm)
+    | Some e ->
+        (Stream.junk __strm; let rest = __strm in text (Stream.icons e rest))
+    | _ -> Stream.sempty
   and quote s =
     let buf = Utf8Buffer.create 16 in
-    let rec loop = parser
-	[< '( Some '\\', _, u1); '(_, _, u2); rest >] ->
-	  Utf8Buffer.add_char buf u1;
+    let rec loop (__strm : _ Stream.t) =
+      match Stream.peek __strm with
+      | Some ((Some '\\', _, u1)) ->
+          (Stream.junk __strm;
+           (match Stream.peek __strm with
+            | Some ((_, _, u2)) ->
+                (Stream.junk __strm;
+                 let rest = __strm
+                 in
+                   (Utf8Buffer.add_char buf u1;
 	  Utf8Buffer.add_char buf u2;
-	  loop rest
-      |	[< '( Some '"', _, _); rest >]  -> 
+                    loop rest))
+            | _ -> raise (Stream.Error "")))
+      | Some ((Some '"', _, _)) ->
+          (Stream.junk __strm;
+           let rest = __strm in
 	  let s = Utf8Buffer.contents buf in
-	  let s' = unescape s in
-	  [< 'Text s'; parse rest >]
-      |	[< '( _, _, u); rest >] ->
-	  Utf8Buffer.add_char buf u;
-	  loop rest
-      | [< >] -> failwith "A quote is not enclosed."
-    in
-    loop s
+           let s' = unescape s
+           in Stream.icons (Text s') (Stream.slazy (fun _ -> parse rest)))
+      | Some ((_, _, u)) ->
+          (Stream.junk __strm;
+           let rest = __strm in (Utf8Buffer.add_char buf u; loop rest))
+      | _ -> failwith "A quote is not enclosed."
+    in loop s
   and text s =
     let buf = Utf8Buffer.create 16 in
-    let rec loop = parser
-	[<'( Some ('\r' | '\n' | '\133' | '\t'), _, _) | 
-	( _, (`Zs | `Zl | `Zp), _) ; rest >] ->
+    let rec loop (__strm : _ Stream.t) =
+      match Stream.peek __strm with
+      | Some
+          ((Some ('\r' | '\n' | '\133' | '\t'), _, _) |
+             (_, (`Zs | `Zl | `Zp), _))
+          ->
+          (Stream.junk __strm;
+           let rest = __strm in
 	  let s = Utf8Buffer.contents buf in
-	  let s' = unescape s in
-	  [< 'Text s'; parse rest >]
-      |	[< '( Some ('{' | '}' | ':' | ','| '"'), _, _) as e; rest >] ->
+           let s' = unescape s
+           in Stream.icons (Text s') (Stream.slazy (fun _ -> parse rest)))
+      | Some (((Some ('{' | '}' | ':' | ',' | '"'), _, _) as e)) ->
+          (Stream.junk __strm;
+           let rest = __strm in
 	  let s = Utf8Buffer.contents buf in
-	  let s' = unescape s in
-	  [< 'Text s'; parse [< 'e; rest >] >]
-      |	[< '( _, _, u); rest >] ->
-	  Utf8Buffer.add_char buf u;
-	  loop rest
-      |	[< >] ->
-	  let s = Utf8Buffer.contents buf in
-	  let s' = unescape s in
-	  [< 'Text s' >]
-    in
-    loop s
+           let s' = unescape s
   in
+             Stream.icons (Text s')
+               (Stream.slazy (fun _ -> parse (Stream.icons e rest))))
+      | Some ((_, _, u)) ->
+          (Stream.junk __strm;
+           let rest = __strm in (Utf8Buffer.add_char buf u; loop rest))
+      | _ ->
+          let s = Utf8Buffer.contents buf in
+          let s' = unescape s in Stream.ising (Text s')
+    in loop s in
   let p = prep s in
   let p1 = remove_comment p in
   let tokens = parse p1 in
-  let tokens1 = merge_text tokens in
-  let l = stream_to_list tokens1 in l
+  let tokens1 = merge_text tokens in let l = stream_to_list tokens1 in l
 
 let string_to_binary s =
-  let n = String.length s / 2 in
-  let b = String.create n in
-  for i = 0 to n - 1 do
-    let d = int_of_string ("0x" ^ (String.sub s (i * 2) 2)) in
-    b.[i] <- Char.chr d
+  let n = (String.length s) / 2 in
+  let b = String.create n
+  in
+    (for i = 0 to n - 1 do
+       (let d = int_of_string ("0x" ^ (String.sub s (i * 2) 2))
+        in b.[i] <- Char.chr d)
   done;
-  b
+     b)
 
 let root = ref ""
 
 let load_file filename =
   let file =
-    if Filename.is_implicit filename then
-      Filename.concat !root filename else
-      filename
-  in
+    if Filename.is_implicit filename
+    then Filename.concat !root filename
+    else filename in
   let c = open_in_bin file in
-  let buf = Buffer.create 16 in
-  try begin while true do
-    Buffer.add_channel buf c 1
-  done; assert false end
-  with End_of_file ->
-    Buffer.contents buf
+  let buf = Buffer.create 16
+  in
+    try (while true do Buffer.add_channel buf c 1 done; assert false)
+    with | End_of_file -> Buffer.contents buf
 
 type data = 
-    Table of (string, data) Hashtbl.t
+  | Table of (string, data) Hashtbl.t
   | Array_data of data array
   | String_data of string
   | Binary of string
@@ -244,125 +332,117 @@
 
 let rec parse_intvect l a =
   match l with
-    Text num :: Comma :: rest ->
+  | Text num :: Comma :: rest ->
       parse_intvect rest ((int_of_string num) :: a)
   | Text num :: rest ->
-      Intvect (Array.of_list (List.rev ((int_of_string num) :: a))), rest
-  | _ -> 
-      Intvect (Array.of_list (List.rev a)), l
+      ((Intvect (Array.of_list (List.rev ((int_of_string num) :: a)))), rest)
+  | _ -> ((Intvect (Array.of_list (List.rev a))), l)
 
 let rec parse_table l a =
   match parse l with
-    Some d, rest -> parse_table rest (d :: a)
-  | None, rest -> 
+  | (Some d, rest) -> parse_table rest (d :: a)
+  | (None, rest) ->
       let tbl = Hashtbl.create (List.length a) in
       let proc ent =
-	match ent with
-	  Tagged (name, data) ->
-	    Hashtbl.add tbl name data
-	| _ -> failwith "A broken table entry."
-      in
-      List.iter proc a;
-      Table tbl, rest
-
+        (match ent with
+         | Tagged (name, data) -> Hashtbl.add tbl name data
+         | _ -> failwith "A broken table entry.")
+      in (List.iter proc a; ((Table tbl), rest))
 and parse_array l a =
   match l with
-    Brace_l :: rest ->
-      let data, rest = parse_unknown rest in
+  | Brace_l :: rest ->
+      let (data, rest) = parse_unknown rest
+      in
       (match rest with
-	Brace_r :: Comma :: rest -> 
-	  parse_array rest (data :: a)
-      |	Brace_r :: rest -> 
-	  parse_array rest (data :: a)
+         | Brace_r :: Comma :: rest -> parse_array rest (data :: a)
+         | Brace_r :: rest -> parse_array rest (data :: a)
       |	_ -> failwith "A brace is not enclosed.")
-  | Text text :: Comma :: rest ->
-      parse_array rest ((String_data text) :: a)
+  | Text text :: Comma :: rest -> parse_array rest ((String_data text) :: a)
   | Text text :: rest ->
-      Array_data (Array.of_list (List.rev ((String_data text) :: a))), rest
-  | _ ->
-      Array_data (Array.of_list (List.rev a)), l
-
+      ((Array_data (Array.of_list (List.rev ((String_data text) :: a)))),
+       rest)
+  | _ -> ((Array_data (Array.of_list (List.rev a))), l)
 and parse_unknown l =
   match l with
-    Text text :: Brace_r :: rest ->
-      String_data text, Brace_r :: rest
+  | Text text :: Brace_r :: rest -> ((String_data text), (Brace_r :: rest))
   | Text text :: Comma :: rest -> parse_array l []
   | Text text :: rest -> parse_table l []
   | _ -> parse_array l []
-
-and parse l = match l with
-    Text tname :: Colon :: Text "table" :: Brace_l :: rest ->
-      let data, rest = parse_table rest [] in
+and parse l =
+  match l with
+  | Text tname :: Colon :: Text "table" :: Brace_l :: rest ->
+      let (data, rest) = parse_table rest []
+      in
       (match rest with
-	Brace_r :: rest ->
-	  Some (Tagged (tname, data)), rest
+         | Brace_r :: rest -> ((Some (Tagged (tname, data))), rest)
       |	_ -> failwith "A brace is not enclosed.")
   | Text tname :: Colon :: Text "array" :: Brace_l :: rest ->
-      let data, rest = parse_array rest [] in
+      let (data, rest) = parse_array rest []
+      in
       (match rest with
-	Brace_r :: rest ->
-	  Some (Tagged (tname, data)), rest
+         | Brace_r :: rest -> ((Some (Tagged (tname, data))), rest)
       |	_ -> failwith "A brace is not enclosed.")
-  | Text tname :: Colon :: Text "string" :: Brace_l ::
-    Text data :: Brace_r :: rest ->  
-      Some (Tagged (tname, String_data data)), rest
-  | Text tname :: Colon :: Text "bin" :: Brace_l :: 
-    Text data :: Brace_r :: rest ->
-      let b = string_to_binary data in
-      Some (Tagged (tname, Binary b)), rest
-  | Text tname :: Colon :: Text "import" :: Brace_l ::
-    Text filename :: Brace_r :: rest ->
-      prerr_endline "Warning : file loading is not supported.";
-      Some (Tagged (tname, Binary "")), rest
-  | Text tname :: Colon :: Text "int" :: Brace_l ::
-    Text num :: Brace_r :: rest ->
-      let n = int_of_string num in
-      Some (Tagged (tname, Int n)), rest
+  | Text tname :: Colon :: Text "string" :: Brace_l :: Text data ::
+      Brace_r :: rest -> ((Some (Tagged (tname, (String_data data)))), rest)
+  | Text tname :: Colon :: Text "bin" :: Brace_l :: Text data :: Brace_r ::
+      rest ->
+      let b = string_to_binary data
+      in ((Some (Tagged (tname, (Binary b)))), rest)
+  | Text tname :: Colon :: Text "import" :: Brace_l :: Text filename ::
+      Brace_r :: rest ->
+      (prerr_endline "Warning : file loading is not supported.";
+       ((Some (Tagged (tname, (Binary "")))), rest))
+  | Text tname :: Colon :: Text "int" :: Brace_l :: Text num :: Brace_r ::
+      rest ->
+      let n = int_of_string num in ((Some (Tagged (tname, (Int n)))), rest)
   | Text tname :: Colon :: Text "intvector" :: Brace_l :: rest ->
-      let data, rest = parse_intvect rest [] in
+      let (data, rest) = parse_intvect rest []
+      in
       (match rest with
-	Brace_r :: rest ->
-	  Some (Tagged (tname, data)), rest
+         | Brace_r :: rest -> ((Some (Tagged (tname, data))), rest)
       |	_ -> failwith "A brace is not enclosed.")
   | Text name :: Brace_l :: rest ->
-      let data, rest = parse_unknown rest in
+      let (data, rest) = parse_unknown rest
+      in
       (match rest with
-	Brace_r :: rest ->
-	  Some (Tagged (name, data)), rest
+         | Brace_r :: rest -> ((Some (Tagged (name, data))), rest)
       |	_ -> failwith "A brace is not enclosed.")
-  | _ -> None, l
+  | _ -> (None, l)
 
 let col_parse s =
   let s = Utf8NF.nfd s in
   let lexbuf = Lexing.from_string s in
-  let ace_info = ColParser.main ColLexer.token lexbuf in
-  cetbl_of ace_info
+  let ace_info = ColParser.main ColLexer.token lexbuf in cetbl_of ace_info
 
-let localedef = function Table tbl ->
-  let col_info = try
-    Some (match Hashtbl.find tbl "CollationElements" with 
-      Table tbl ->
+let localedef =
+  function
+  | Table tbl ->
+      let col_info =
+        (try
+           Some
+             (match Hashtbl.find tbl "CollationElements" with
+              | Table tbl ->
 	(match Hashtbl.find tbl "Sequence" with 
-	  String_data s -> col_parse s
+                   | String_data s -> col_parse s
 	| _ -> assert false)
     | _ -> assert false)
-  with Not_found -> None
-  in
-  {Unidata.col_info = col_info}
+         with | Not_found -> None)
+      in { Unidata.col_info = col_info; }
   | _ -> assert false
 
 let main () =
   let cs = Stream.of_channel readfile in
   let stream = CE.ustream_of enc cs in
   let lexed = lexer stream in
-  let data, rest = parse_table lexed [] in
-  if rest <> [] then failwith "Strange trailing data.";
+  let (data, rest) = parse_table lexed []
+  in
+    (if rest <> [] then failwith "Strange trailing data." else ();
   let proc key entry =
-    let locale_info = localedef entry in
-    Database.write dir "mar" output_value key locale_info
+       let locale_info = localedef entry
+       in Database.write dir "mar" output_value key locale_info
   in
-  (match data with
-    Table tbl -> Hashtbl.iter proc tbl
+       match data with
+       | Table tbl -> Hashtbl.iter proc tbl
   | _ -> failwith "Broken data.")
     
 let _ = main ()
